{"version":3,"sources":["assets/spinner.gif","components/Jumbotron/index.js","utils/mutations.js","utils/helpers.js","pages/Success.js","utils/reducers.js","utils/actions.js","utils/GlobalState.js","components/ProductItem/index.js","utils/queries.js","components/ProductList/index.js","components/CategoryMenu/index.js","components/CartItem/index.js","utils/auth.js","components/Cart/index.js","pages/Home.js","pages/Detail.js","pages/NoMatch.js","pages/Login.js","pages/Signup.js","components/Nav/index.js","pages/OrderHistory.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Jumbotron","children","style","height","clear","paddingTop","textAlign","LOGIN","gql","ADD_ORDER","ADD_USER","idbPromise","storeName","method","object","Promise","resolve","reject","db","tx","store","request","window","indexedDB","open","onupgradeneeded","e","result","createObjectStore","keyPath","onerror","console","log","onsuccess","transaction","objectStore","put","all","getAll","delete","_id","oncomplete","close","Success","useMutation","addOrder","useEffect","a","cart","products","map","item","length","variables","data","forEach","setTimeout","location","assign","saveOrder","reducer","state","action","type","categories","currentCategory","cartOpen","product","newState","filter","purchaseQuantity","StoreContext","createContext","Provider","StoreProvider","value","initialState","props","useReducer","dispatch","useStoreContext","useContext","ProductItem","image","name","price","quantity","className","to","alt","src","count","pluralize","onClick","itemInCart","find","cartItem","parseInt","QUERY_PRODUCTS","QUERY_CATEGORIES","QUERY_USER","QUERY_CHECKOUT","ProductList","useQuery","loading","then","category","id","key","spinner","CategoryMenu","categoryData","CartItem","placeholder","onChange","target","role","aria-label","removeFromCart","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","removeItem","stripePromise","loadStripe","Cart","useLazyQuery","getCheckout","toggleCart","getCart","res","redirectToCheckout","sessionId","checkout","session","sum","toFixed","calculateTotal","Auth","loggedIn","productIds","i","push","Home","Detail","useParams","useState","currentProduct","setCurrentProduct","indexedProducts","description","disabled","p","NoMatch","Login","email","password","formState","setFormState","login","error","handleFormSubmit","event","preventDefault","mutationResponse","handleChange","onSubmit","htmlFor","Signup","addUser","firstName","lastName","Nav","href","logout","OrderHistory","user","orders","order","purchaseDate","toLocaleDateString","index","client","ApolloClient","operation","setContext","headers","authorization","uri","App","exact","path","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.8e92d83f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spinner.ab497855.gif\";","import React from \"react\";\n\nfunction Jumbotron({ children }) {\n  return (\n    <div\n      style={{ height: 560, clear: \"both\", paddingTop: 120, textAlign: \"center\" }}\n    >\n      {children}\n    </div>\n  );\n}\n\nexport default Jumbotron;\n","import gql from 'graphql-tag';\n\nexport const LOGIN = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n\n\nexport const ADD_ORDER = gql`\n  mutation addOrder($products: [ID]!) {\n    addOrder(products: $products) {\n      purchaseDate\n      products {\n        _id\n      name\n      description\n      price\n      quantity\n      category {\n        name\n      } \n      }\n    }\n  }\n`;\n\n\nexport const ADD_USER = gql`\n  mutation addUser($firstName: String!, $lastName: String!, $email: String!, $password: String!) {\n    addUser(firstName: $firstName, lastName: $lastName, email: $email, password: $password) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;","export function pluralize(name, count) {\n  if (count === 1) {\n    return name\n  }\n  return name + 's'\n}\n\nexport function idbPromise(storeName, method, object) {\n  return new Promise((resolve, reject) => {\n    // open connection to the database `shop-shop` with the version of 1\n    const request = window.indexedDB.open('shop-shop', 1);\n\n    // create variables to hold reference to the database, transaction (tx), and object store\n    let db, tx, store;\n\n    // if version has changed (or if this is the first time using the database), run this method and create the three object stores \n    request.onupgradeneeded = function (e) {\n      const db = request.result;\n      // create object store for each type of data and set \"primary\" key index to be the `_id` of the data\n      db.createObjectStore('products', { keyPath: '_id' });\n      db.createObjectStore('categories', { keyPath: '_id' });\n      db.createObjectStore('cart', { keyPath: '_id' });\n    };\n\n    // handle any errors with connecting\n    request.onerror = function (e) {\n      console.log('There was an error');\n    };\n\n    // on database open success\n    request.onsuccess = function (e) {\n      // save a reference of the database to the `db` variable\n      db = request.result;\n      // open a transaction do whatever we pass into `storeName` (must match one of the object store names)\n      tx = db.transaction(storeName, 'readwrite');\n      // save a reference to that object store\n      store = tx.objectStore(storeName);\n\n      // if there's any errors, let us know\n      db.onerror = function (e) {\n        console.log('error', e);\n      };\n\n      switch (method) {\n        case 'put':\n          store.put(object);\n          resolve(object);\n          break;\n        case 'get':\n          const all = store.getAll();\n          all.onsuccess = function () {\n            resolve(all.result);\n          };\n          break;\n        case 'delete':\n          store.delete(object._id);\n          break;\n        default:\n          console.log('No valid method');\n          break;\n      }\n\n      // when the transaction is complete, close the connection\n      tx.oncomplete = function () {\n        db.close();\n      };\n    };\n  });\n}\n","import React, { useEffect } from 'react';\nimport { useMutation } from '@apollo/react-hooks';\nimport Jumbotron from \"../components/Jumbotron\";\nimport { ADD_ORDER } from '../utils/mutations';\nimport { idbPromise } from '../utils/helpers';\n\nfunction Success () {\n\n  const [addOrder] = useMutation(ADD_ORDER);\n\n  useEffect(() => {\n    async function saveOrder() {\n      const cart = await idbPromise('cart', 'get');\n      const products = cart.map(item => item._id);\n\n      if (products.length) {\n        const { data } = await addOrder({ variables: { products } });\n        const productData = data.addOrder.products;\n\n        productData.forEach((item) => {\n          idbPromise('cart', 'delete', item);\n        });\n      }\n\n      setTimeout(() => {\n        window.location.assign('/')\n      }, 3000);\n    }\n\n    saveOrder();\n  },[addOrder]);\n\n\n  return (\n    <div>\n      <Jumbotron>\n        <h1>Success!</h1>\n        <h2>\n          Thank you for your purchase!\n        </h2>\n        <h2>\n          You will now be redirected to the homepage\n        </h2>\n      </Jumbotron>\n    </div>\n  );\n};\n\nexport default Success;","import { useReducer } from 'react';\n\nimport {\n  UPDATE_PRODUCTS,\n  UPDATE_CATEGORIES,\n  UPDATE_CURRENT_CATEGORY,\n  ADD_TO_CART,\n  ADD_MULTIPLE_TO_CART,\n  REMOVE_FROM_CART,\n  UPDATE_CART_QUANTITY,\n  CLEAR_CART,\n  TOGGLE_CART\n} from \"./actions\";\n\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    // if action type value is the value of `UPDATE_PRODUCTS`, return a new state object with an updated products array\n    case UPDATE_PRODUCTS:\n      return {\n        ...state,\n        products: [...action.products],\n      };\n    \n    case UPDATE_CATEGORIES:\n      return {\n        ...state,\n        categories: [...action.categories]\n      };\n\n    case UPDATE_CURRENT_CATEGORY: \n      return {\n        ...state,\n        currentCategory: action.currentCategory\n    };\n\n    case ADD_TO_CART:\n      return {\n        ...state,\n        cartOpen: true,\n        cart: [...state.cart, action.product]\n      };\n\n    case ADD_MULTIPLE_TO_CART:\n      return {\n        ...state,\n        cart: [...state.cart, ...action.products],\n      };\n\n    case REMOVE_FROM_CART:\n      let newState = state.cart.filter(product => {\n        return product._id !== action._id;\n      });\n\n      return {\n        ...state,\n        cartOpen: newState.length > 0,\n        cart: newState\n      };\n\n    case UPDATE_CART_QUANTITY:\n      return {\n        ...state,\n        cartOpen: true,\n        cart: state.cart.map(product => {\n          if (action._id === product._id) {\n            product.purchaseQuantity = action.purchaseQuantity;\n          }\n          return product;\n        })\n      };\n\n    case CLEAR_CART: \n      return {\n        ...state,\n        cartOpen: false,\n        cart: []\n      };\n\n    case TOGGLE_CART:\n      return {\n        ...state,\n        cartOpen: !state.cartOpen\n      };\n\n    // if it's none of these actions, do not update state at all and keep things the same!\n    default:\n      return state;\n  }\n};\n\nexport function useProductReducer(initialState) {\n  return useReducer(reducer, initialState);\n}","export const UPDATE_PRODUCTS = \"UPDATE_PRODUCTS\";\nexport const UPDATE_CATEGORIES = \"UPDATE_CATEGORIES\";\nexport const UPDATE_CURRENT_CATEGORY = \"UPDATE_CURRENT_CATEGORY\";\nexport const ADD_TO_CART = 'ADD_TO_CART';\nexport const ADD_MULTIPLE_TO_CART = 'ADD_MULTIPLE_TO_CART';\nexport const REMOVE_FROM_CART = 'REMOVE_FROM_CART';\nexport const UPDATE_CART_QUANTITY = 'UPDATE_CART_QUANTITY';\nexport const CLEAR_CART = 'CLEAR_CART';\nexport const TOGGLE_CART = 'TOGGLE_CART';\n\n","import React, { createContext, useContext } from 'react';\nimport { useProductReducer } from './reducers';\n\nconst StoreContext = createContext();\nconst { Provider } = StoreContext;\n\nconst StoreProvider = ({ value = [], ...props}) => {\n  const [state, dispatch] = useProductReducer({\n    products: [],\n    cart: [],\n    cartOpen: false,\n    categories: [],\n    currentCategory: '',\n  });\n  \n  return <Provider value={[state, dispatch]} {...props} />;\n};\n\nconst useStoreContext = () => {\n  return useContext(StoreContext);\n};\n\nexport { StoreProvider, useStoreContext };","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { pluralize } from \"../../utils/helpers\"\nimport { useStoreContext } from '../../utils/GlobalState';\nimport { idbPromise } from \"../../utils/helpers\";\nimport { ADD_TO_CART, UPDATE_CART_QUANTITY } from '../../utils/actions';\n\nfunction ProductItem(item) {\n  const {\n    image,\n    name,\n    _id,\n    price,\n    quantity\n  } = item;\n\n  const [state, dispatch] = useStoreContext();\n\n  const { cart } = state;\n\n  const addToCart = () => {\n    const itemInCart = cart.find((cartItem) => cartItem._id === _id)\n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: _id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n      idbPromise('cart', 'put', {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...item, purchaseQuantity: 1 }\n      });\n      idbPromise('cart', 'put', { ...item, purchaseQuantity: 1 });\n    }\n  };\n\n  return (\n    <div className=\"card px-1 py-1\">\n      <Link to={`/products/${_id}`}>\n        <img\n          alt={name}\n          src={`/images/${image}`}\n        />\n        <p>{name}</p>\n      </Link>\n      <div>\n        <div>{quantity} {pluralize(\"item\", quantity)} in stock</div>\n        <span>${price}</span>\n      </div>\n      <button onClick={addToCart}>Add to cart</button>\n    </div>\n  );\n}\n\nexport default ProductItem;\n","import gql from 'graphql-tag';\n\nexport const QUERY_PRODUCTS = gql`\n  query getProducts($category: ID) {\n    products(category: $category) {\n      _id\n      name\n      description\n      price\n      quantity\n      image\n      category {\n        _id\n      }\n    }\n  }\n`;\n\nexport const QUERY_ALL_PRODUCTS = gql`\n  {\n    products {\n      _id\n      name\n      description\n      price\n      quantity\n      category {\n        name\n      }\n    }\n  }\n`;\n\nexport const QUERY_CATEGORIES = gql`\n{\n  categories {\n    _id\n    name\n  }\n}\n`;\n\nexport const QUERY_USER = gql`\n{\n  user {\n    firstName\n    lastName\n    orders {\n      _id\n      purchaseDate\n      products {\n        _id\n        name\n        description\n        price\n        quantity\n        image\n      }\n    }\n  }\n}\n`;\n\nexport const QUERY_CHECKOUT = gql`\n  query getCheckout($products: [ID]!) {\n    checkout(products: $products) {\n      session\n    }\n  }\n  `;","import React, { useEffect } from \"react\";\nimport { useQuery } from '@apollo/react-hooks';\nimport { useStoreContext } from '../../utils/GlobalState';\nimport { UPDATE_PRODUCTS } from '../../utils/actions';\nimport ProductItem from \"../ProductItem\";\nimport { QUERY_PRODUCTS } from \"../../utils/queries\";\nimport spinner from \"../../assets/spinner.gif\"\nimport { idbPromise } from \"../../utils/helpers\";\n\nfunction ProductList() {\n\n  const [state, dispatch] = useStoreContext();\n  const { currentCategory } = state;\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  useEffect(() => {\n    if (data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      });\n\n      // save to indexedDB using helper function\n      data.products.forEach((product) => {\n        idbPromise('products', 'put', product);\n      });\n      // add else if to check it 'loading' is undefined in 'useQuery()' Hook\n    } else if (!loading) {\n      // since we are offline, get all data from indexedDB\n      idbPromise('products', 'get').then((products) => {\n        // use retrieved data to set global state for offline browsing\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: products\n        });\n      });\n    }\n  }, [data, loading, dispatch]);\n\n  function filterProducts() {\n    if (!currentCategory) {\n      return state.products;\n    }\n    return state.products.filter(product => product.category.id === currentCategory);\n  }\n\n  return (\n    <div className=\"my-2\">\n      <h2>Our Products:</h2>\n      {state.products.length ? (\n        <div className=\"flex-row\">\n            {filterProducts().map(product => (\n                <ProductItem\n                  key= {product._id}\n                  _id={product._id}\n                  image={product.image}\n                  name={product.name}\n                  price={product.price}\n                  quantity={product.quantity}\n                />\n            ))}\n        </div>\n      ) : (\n        <h3>You haven't added any products yet!</h3>\n      )}\n      { loading ? \n      <img src={spinner} alt=\"loading\" />: null}\n    </div>\n  );\n}\n\nexport default ProductList;\n","import React, { useEffect } from \"react\";\nimport { UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY } from '../../utils/actions';\nimport { useQuery } from '@apollo/react-hooks';\nimport { QUERY_CATEGORIES } from \"../../utils/queries\";\nimport { useStoreContext } from '../../utils/GlobalState';\nimport { idbPromise } from '../../utils/helpers';\n\nfunction CategoryMenu() {\n\n  const [state, dispatch] = useStoreContext();\n  const { categories } = state;\n  const { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\n  \n  useEffect(()=> {\n    // if categoryData exists or has changed from the response of useQuery, then run dispatch()\n    if (categoryData) {\n      // execute our dispatch function with our action object indicating the type of action and the data to set our state for categories to\n      dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categoryData.categories\n      });\n      categoryData.categories.forEach(category => {\n        idbPromise('categories', 'put', category);\n      });\n    } else if (!loading) {\n      idbPromise('categories', 'get').then(categories => {\n        dispatch({\n          type: UPDATE_CATEGORIES,\n          categories: categories\n        });\n      });\n    }\n  }, [categoryData, loading, dispatch]);\n\n  const handleClick = id => {\n    dispatch({\n      type: UPDATE_CURRENT_CATEGORY,\n      currentCategory: id\n    });\n  };\n\n  return (\n    <div>\n      <h2>Choose a Category:</h2>\n      {categories.map(item => (\n        <button\n          key={item._id}\n          onClick={() => {\n            handleClick(item._id);\n          }}\n        >\n          {item.name}\n        </button>\n      ))}\n    </div>\n  );\n}\n\nexport default CategoryMenu;\n","import React from 'react';\nimport { useStoreContext } from '../../utils/GlobalState';\nimport { REMOVE_FROM_CART, UPDATE_CART_QUANTITY } from '../../utils/actions';\nimport { idbPromise } from \"../../utils/helpers\";\n\nconst CartItem = ({ item }) => {\n\n  const [, dispatch] = useStoreContext();\n\n  const removeFromCart = item => {\n    dispatch({\n      type: REMOVE_FROM_CART,\n      _id: item._id\n    });\n\n    idbPromise('cart', 'delete', { ...item });\n  };\n\n  const onChange = (e) => {\n    const value = e.target.value;\n\n    if (value === '0') {\n      dispatch({\n        type: REMOVE_FROM_CART,\n        _id: item._id\n      });\n\n      idbPromise('cart', 'delete', { ...item });\n    } else {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: item._id,\n        purchaseQuantity: parseInt(value)\n      });\n\n      idbPromise('cart', 'put', { ...item, purchaseQuantity: parseInt(value) });\n    }\n  };\n\n  return (\n    <div className=\"flex-row\">\n      <div>\n        <img\n          src={`/images/${item.image}`}\n          alt=\"\"\n        />\n      </div>\n      <div>\n        <div>{item.name}, ${item.price}</div>\n        <div>\n          <span>Qty:</span>\n          <input\n            type=\"number\"\n            placeholder=\"1\"\n            value={item.purchaseQuantity}\n            onChange={onChange}\n          />\n          <span\n            role=\"img\"\n            aria-label=\"trash\"\n            onClick={() => removeFromCart(item)}\n          >\n            🗑️\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default CartItem;","import decode from 'jwt-decode';\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token);\n  }\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","import { useLazyQuery } from '@apollo/react-hooks';\nimport React, { useEffect } from 'react';\nimport CartItem from '../CartItem';\nimport Auth from '../../utils/auth';\nimport './style.css';\nimport { useStoreContext } from '../../utils/GlobalState';\nimport { TOGGLE_CART, ADD_MULTIPLE_TO_CART } from '../../utils/actions';\nimport { idbPromise } from \"../../utils/helpers\";\nimport { QUERY_CHECKOUT } from '../../utils/queries';\nimport { loadStripe } from '@stripe/stripe-js';\n\nconst stripePromise = loadStripe('pk_test_TYooMQauvdEDq54NiTphI7jx')\n\nconst Cart = () => {\n\n  const [getCheckout, { data }] = useLazyQuery(QUERY_CHECKOUT);\n\n  const [state, dispatch] = useStoreContext();\n\n  useEffect(() => {\n    async function getCart() {\n      const cart = await idbPromise('cart', 'get');\n      dispatch({ type: ADD_MULTIPLE_TO_CART, products: [...cart] });\n    };\n\n    if (!state.cart.length) {\n      getCart();\n    }\n  }, [state.cart.length, dispatch]);\n\n  useEffect(() => {\n    if (data) {\n      stripePromise.then((res) => {\n        res.redirectToCheckout({ sessionId: data.checkout.session });\n      });\n    }\n  }, [data]);\n\n  function toggleCart() {\n    dispatch({ type:  TOGGLE_CART})\n  }\n\n  if (!state.cartOpen) {\n    return(\n      <div className=\"cart-closed\" onClick={toggleCart}>\n        <span role=\"img\" aria-label=\"trash\">🛒</span>\n      </div>\n    );\n  };\n\n  function calculateTotal() {\n    let sum = 0;\n    state.cart.forEach(item => {\n      sum += item.price * item.purchaseQuantity;\n    });\n    return sum.toFixed(2);\n  }\n\n  function submitCheckout() {\n    const productIds = [];\n  \n    state.cart.forEach((item) => {\n      for (let i = 0; i < item.purchaseQuantity; i++) {\n        productIds.push(item._id);\n      }\n    });\n\n    getCheckout({\n      variables: { products: productIds }\n    });\n  }\n\n  return (\n    <div className=\"cart\">\n      <div className=\"close\" onClick={toggleCart}>[close]</div>\n      <h2>Shopping Cart</h2>\n      {state.cart.length ? (\n        <div>\n          {state.cart.map(item => (\n            <CartItem key={item._id} item={item} />\n          ))}\n         <div className=\"flex-row space-between\">\n           <strong>Total: ${calculateTotal()}</strong>\n           {\n              Auth.loggedIn() ?\n               <button onClick={submitCheckout}>\n                 Checkout\n               </button>\n                :\n                <span>(log in to check out)</span>\n           }\n          </div>\n        </div>\n      ) : (\n        <h3>\n         <span role=\"img\" aria-label=\"shocked\">\n            😱\n          </span>\n          You haven't added anything to your cart yet!\n        </h3>\n      )}\n    </div>\n\n  );\n};\n\nexport default Cart;\n","import React from \"react\";\nimport ProductList from \"../components/ProductList\";\nimport CategoryMenu from \"../components/CategoryMenu\";\nimport Cart from '../components/Cart';\n\nconst Home = () => {\n\n  return (\n    <div className=\"container\">\n      <CategoryMenu />\n      <ProductList />\n      <Cart />\n    </div>\n  );\n};\n\nexport default Home;\n","import React, { useEffect, useState } from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { useQuery } from '@apollo/react-hooks';\nimport { useStoreContext } from '../utils/GlobalState';\nimport { idbPromise } from \"../utils/helpers\";\nimport { QUERY_PRODUCTS } from \"../utils/queries\";\nimport spinner from '../assets/spinner.gif'\nimport Cart from '../components/Cart';\nimport {\n  REMOVE_FROM_CART,\n  UPDATE_CART_QUANTITY,\n  ADD_TO_CART,\n  UPDATE_PRODUCTS,\n} from '../utils/actions';\n\nfunction Detail() {\n\n  const [state, dispatch] = useStoreContext();\n  const { id } = useParams();\n\n  const [currentProduct, setCurrentProduct] = useState({})\n\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  const { products, cart } = state; \n\n  useEffect(() => {\n    if (products.length) {\n      setCurrentProduct(products.find(product => product._id === id));\n    } else if (data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      });\n\n      data.products.forEach((product) => {\n        idbPromise('products', 'put', product);\n      });\n    } else if (!loading) {\n      idbPromise('products', 'get').then((indexedProducts) => {\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: indexedProducts\n        });\n      });\n    }\n  }, [products, data, loading, dispatch, id]);\n\n  const addToCart = () => {\n    const itemInCart = cart.find((cartItem) => cartItem._id === id)\n  \n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n      // if we're updating quantity, use existing item data and increment purchaseQuantity value by one\n      idbPromise('cart', 'put', {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...currentProduct, purchaseQuantity: 1 }\n      });\n      // if product isn't in the cart yet, add it to the current shopping cart in IndexedDB\n      idbPromise('cart', 'put', { ...currentProduct, purchaseQuantity: 1 });\n    }\n  };\n\n  const removeFromCart = () => {\n    dispatch({\n      type: REMOVE_FROM_CART,\n      _id: currentProduct._id\n    });\n  \n    // upon removal from cart, delete the item from IndexedDB using the `currentProduct._id` to locate what to remove\n    idbPromise('cart', 'delete', { ...currentProduct });\n  };\n\n  return (\n    <>\n      {currentProduct ? (\n        <div className=\"container my-1\">\n          <Link to=\"/\">\n            ← Back to Products\n          </Link>\n\n          <h2>{currentProduct.name}</h2>\n\n          <p>\n            {currentProduct.description}\n          </p>\n\n          <p>\n            <strong>Price:</strong>\n            ${currentProduct.price}\n            {\" \"}\n            <button onClick={addToCart}>\n              Add to Cart\n            </button>\n            <button\n              disabled={!cart.find(p => p._id === currentProduct._id)}\n              onClick={removeFromCart}>\n              Remove from Cart\n            </button>\n          </p>\n\n          <img\n            src={`/images/${currentProduct.image}`}\n            alt={currentProduct.name}\n          />\n        </div>\n      ) : null}\n      {\n        loading ? <img src={spinner} alt=\"loading\" /> : null\n      }\n      <Cart />\n    </>\n  );\n};\n\nexport default Detail;\n","import React from \"react\";\nimport Jumbotron from \"../components/Jumbotron\";\n\nconst NoMatch = () => {\n  return (\n    <div>\n      <Jumbotron>\n        <h1>404 Page Not Found</h1>\n        <h1>\n          <span role=\"img\" aria-label=\"Face With Rolling Eyes Emoji\">\n            🙄\n          </span>\n        </h1>\n      </Jumbotron>\n    </div>\n  );\n};\n\nexport default NoMatch;\n","import React, { useState } from \"react\";\nimport { useMutation } from '@apollo/react-hooks';\nimport { Link } from \"react-router-dom\";\nimport { LOGIN } from \"../utils/mutations\"\nimport Auth from \"../utils/auth\";\n\nfunction Login(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' })\n  const [login, { error }] = useMutation(LOGIN);\n\n  const handleFormSubmit = async event => {\n    event.preventDefault();\n    try {\n      const mutationResponse = await login({ variables: { email: formState.email, password: formState.password } })\n      const token = mutationResponse.data.login.token;\n      Auth.login(token);\n    } catch (e) {\n      console.log(e)\n    }\n  };\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/signup\">\n        ← Go to Signup\n      </Link>\n\n      <h2>Login</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email address:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        {\n          error ? <div>\n            <p className=\"error-text\" >The provided credentials are incorrect</p>\n          </div> : null\n        }\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">\n            Submit\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\n\nexport default Login;\n","import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useMutation } from '@apollo/react-hooks';\nimport Auth from \"../utils/auth\";\nimport { ADD_USER } from \"../utils/mutations\";\n\nfunction Signup(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [addUser] = useMutation(ADD_USER);\n\n  const handleFormSubmit = async event => {\n    event.preventDefault();\n    const mutationResponse = await addUser({\n      variables: {\n        email: formState.email, password: formState.password,\n        firstName: formState.firstName, lastName: formState.lastName\n      }\n    });\n    const token = mutationResponse.data.addUser.token;\n    Auth.login(token);\n  };\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/login\">\n        ← Go to Login\n      </Link>\n\n      <h2>Signup</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"firstName\">First Name:</label>\n          <input\n            placeholder=\"First\"\n            name=\"firstName\"\n            type=\"firstName\"\n            id=\"firstName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"lastName\">Last Name:</label>\n          <input\n            placeholder=\"Last\"\n            name=\"lastName\"\n            type=\"lastName\"\n            id=\"lastName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">\n            Submit\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n\n}\n\nexport default Signup;\n","import React from \"react\";\nimport Auth from \"../../utils/auth\";\nimport { Link } from \"react-router-dom\";\n\nfunction Nav() {\n\n  function showNavigation() {\n    if (Auth.loggedIn()) {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/orderHistory\">\n              Order History\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            {/* this is not using the Link component to logout or user and then refresh the application to the start */}\n            <a href=\"/\" onClick={() => Auth.logout()}>\n              Logout\n            </a>\n          </li>\n        </ul>\n      );\n    } else {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/signup\">\n              Signup\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            <Link to=\"/login\">\n              Login\n            </Link>\n          </li>\n        </ul>\n      );\n    }\n  }\n\n  return (\n    <header className=\"flex-row px-1\">\n      <h1>\n        <Link to=\"/\">\n          <span role=\"img\" aria-label=\"shopping bag\">🛍️</span>\n          -Shop-Shop\n        </Link>\n      </h1>\n\n      <nav>\n        {showNavigation()}\n      </nav>\n    </header>\n  );\n}\n\nexport default Nav;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { useQuery } from '@apollo/react-hooks';\nimport { QUERY_USER } from \"../utils/queries\";\n\nfunction OrderHistory() {\n  const { data } = useQuery(QUERY_USER);\n  let user;\n\n  if (data) {\n    user = data.user;\n  }\n\n  return (\n    <>\n      <div className=\"container my-1\">\n        <Link to=\"/\">\n          ← Back to Products\n          </Link>\n\n        {user ? (\n          <>\n            <h2>Order History for {user.firstName} {user.lastName}</h2>\n            {user.orders.map((order) => (\n              <div key={order._id} className=\"my-2\">\n                <h3>{new Date(parseInt(order.purchaseDate)).toLocaleDateString()}</h3>\n                <div className=\"flex-row\">\n                  {order.products.map(({ _id, image, name, price }, index) => (\n                    <div key={index} className=\"card px-1 py-1\">\n                      <Link to={`/products/${_id}`}>\n                        <img\n                          alt={name}\n                          src={`/images/${image}`}\n                        />\n                        <p>{name}</p>\n                      </Link>\n                      <div>\n                        <span>${price}</span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            ))}\n          </>\n        ) : null}\n\n      </div>\n\n    </>)\n\n};\n\nexport default OrderHistory;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport ApolloClient from 'apollo-boost';\nimport Success from './pages/Success';\nimport Home from \"./pages/Home\";\nimport Detail from \"./pages/Detail\";\nimport NoMatch from \"./pages/NoMatch\";\nimport Login from \"./pages/Login\";\nimport Signup from \"./pages/Signup\";\nimport Nav from \"./components/Nav\";\nimport { StoreProvider } from './utils/GlobalState';\nimport OrderHistory from \"./pages/OrderHistory\";\n\nconst client = new ApolloClient({\n  request: (operation) => {\n    const token = localStorage.getItem('id_token')\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : ''\n      }\n    })\n  },\n  uri: '/graphql',\n})\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div>\n          <StoreProvider>\n          < Nav />\n            <Switch>\n              <Route exact path=\"/\" component={Home} />\n              <Route exact path=\"/login\" component={Login} />\n              <Route exact path=\"/signup\" component={Signup} />\n              <Route exact path=\"/orderHistory\" component={OrderHistory} />\n              <Route exact path=\"/products/:id\" component={Detail} />\n              <Route exact path=\"/success\" component={Success} />\n              <Route component={NoMatch} />\n            </Switch>\n          </StoreProvider>\n        </div>\n      </Router>\n    </ApolloProvider>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (\n    process.env.NODE_ENV === 'production' &&\n    'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}